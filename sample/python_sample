# virtualenv
pip install pipenv
mkdir project
cd project
pipenv shell

# argv
if len(sys.argv) == 2:
    arg1 = sys.argv[1]

# String
if string.find("is") == -1:
    print("Not found")

# Misc
type(obj)
    * check class type of an obj

sys.exit(0)
    * exit program

# os
## list files
for file in os.listdir():
    if file.endswith(".html"):

## import
import tool
...
ret = tool.get_value()

## print formt
print("%d %d", % (3, 5))

## str to int
ten = int("10")

## class
class Dog():
    kind = "animal"

    def __init__(self, name):
        self.name = name
        self.tricks = []

    def add_tricks(self, trick):
        self.tricks.append(trick)

* list all attribute of an instance
    * dir(instance)

# pandas
import pandas as pd
df = pd.read_html(file)[0]  # Read HTML file into DataFrame using read_html()

for value in df.values:
    if value[0]:
        print(value[1])

data = pd.read_csv(file)
df = pd.dataFrame(data=data)

for col in df.columns:
    print("column name: %s" % col)
    # df[col] is in type of pandas.core.series.Series
    print("ave of col: %f" % df[col].mean())

for index, rows in df.iterrows():
    for colname in df.columns:
        row = rows[colname]
        print("%s = {%s}\n" % (colname, str(row))

df = pd.read_csv(filename, index_col=0)   # read data from csv file, and use column 1 as index

* show column list
    df.columns.tolist()

* get nth row
    * df.iloc[0]
        * select one row, reuslt is a Series
    * df.iloc[[1,3,5]]
        * select multiple rows, result is a dataFrame

* check what is used as index
    * df.index

* get 0th index
    * df.index[0]
        * we can see what's used as index for this table

* get row from a specific index
    * index = df.index[0]
    * df.loc[index]
        * you need to know the index number of the row beforehand
    * row = df.iloc[0]
    * df.loc[row.name]
        * or we can use row.name as the index to get the row

* Get Index of Rows Whose Column Matches Value
    * df.index[df['column_name']==value].tolist()
        * could be multiple rows match, so the result is a list
    * df.index[(df['points']==9) & (df['team']=='B')].tolist()
        * get index of rows where 'points' is equal to 9 and 'team' is equal to 'B'

* Set a specific column as index
    * df.set_index("Name", inplace = True)
    * result = df.loc["Stuti"]
    * result = df.loc[["Stuti", "Seema"]]
        * select multiple rows
    * result = df.loc[["Stuti", "Seema"], ["City", "Salary"]]
        * select multuple rows as some particular columns
    * result = df.loc[:, ["City", "Salary"]]
        * select all rows with some particular columns
