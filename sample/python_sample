# virtualenv
pip install pipenv
mkdir project
cd project
pipenv shell

# sys
# argv
if len(sys.argv) == 2:
    arg1 = sys.argv[1]

sys.exit(0)
    * exit program

# String
if string.find("is") == -1:
    print("Not found")

string = "abc123"
len(string) = 6
string.lstrip("abc")    # 123
string.rstrip("123")    # abc
string.striip("a3")     # bc12
string[1:]              # bc123
string[:-1]             # abc12

# List
list = []
list.append('a')
len(list) = 1


# os
## list files
for file in os.listdir():
    if file.endswith(".html"):

## if file exists
if (os.path.isfile(file):
    print("file exists")

## check file last modified time
if (os.path.getmtime(file1) > os.path.getmtime(file2)):
    print("file1 is newer")

## execute command
os.system("mv file1 file2")

# import
import tool
...
ret = tool.get_value()

# print formt
print("%d %d", % (3, 5))

# str to int
ten = int("10")

# class
class Dog():
    kind = "animal"

    def __init__(self, name):
        self.name = name
        self.tricks = []

    def add_tricks(self, trick):
        self.tricks.append(trick)

* list all attribute of an instance
    * dir(instance)

# pandas
import pandas as pd
df = pd.read_html(file)[0]  # Read HTML file into DataFrame using read_html()

for value in df.values:
    if value[0]:
        print(value[1])

data = pd.read_csv(file)
df = pd.DataFrame(data=data)

for col in df.columns:
    print("column name: %s" % col)
    # df[col] is in type of pandas.core.series.Series
    print("ave of col: %f" % df[col].mean())

for index, rows in df.iterrows():
    # index: 0, 1, 2, ...
    # rows:
    #   Date             2010-09-09 00:00:00-04:00
    #   Open                               78.6265
    #   High                               78.6265
    #   Low                               77.58326
    #   Close                            77.721336
    #   Volume                               26500
    #   Dividends                              0.0
    #   Stock Splits                           0.0
    #   Capital Gains                          0.0
    # rows['Date'] = "2010-09-09 00:00:00-04:00"
    for colname in df.columns:
        row = rows[colname]
        print("%s = {%s}\n" % (colname, str(row)))

df = pd.read_csv(filename, index_col=0)   # read data from csv file, and use column 1 as index

* show column list
    df.columns.tolist()
    # ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits', 'Capital Gains']

    df['Date']  # type of <class 'pandas.core.series.Series'>
    # 0       2010-09-09 00:00:00-04:00
    # 1       2010-09-10 00:00:00-04:00
    # 2       2010-09-13 00:00:00-04:00
    # 3       2010-09-14 00:00:00-04:00
    # 4       2010-09-15 00:00:00-04:00
    #              ...

* get nth row
    * df.iloc[0]
        * select one row, reuslt is a Series
        # Date             2010-09-09 00:00:00-04:00
        # Open                               78.6265
        # High                               78.6265
        # Low                               77.58326
        # Close                            77.721336
        # Volume                               26500
        # Dividends                              0.0
        # Stock Splits                           0.0
        # Capital Gains                          0.0
        # Name: 0, dtype: object

    * df.iloc[[1,3,5]]
        * select multiple rows, result is a dataFrame

* check what is used as index
    * df.index

* get 0th index
    * df.index[0]
        * we can see what's used as index for this table

* get row from a specific index
    * index = df.index[0]   # in this case, index is 0, 1, 2, ...
    * df.loc[index]
        * you need to know the index number of the row beforehand
    * row = df.iloc[0]
    * df.loc[row.name]
        * or we can use row.name as the index to get the row
    # Date             2010-09-09 00:00:00-04:00
    # Open                               78.6265
    # High                               78.6265
    # Low                               77.58326
    # Close                            77.721336
    # Volume                               26500
    # Dividends                              0.0
    # Stock Splits                           0.0
    # Capital Gains                          0.0
    # Name: 0, dtype: object

* Get Index of Rows Whose Column Matches Value
    * df.index[df['column_name']==value].tolist()
        * could be multiple rows match, so the result is a list
    * df.index[(df['points']==9) & (df['team']=='B')].tolist()
        * get index of rows where 'points' is equal to 9 and 'team' is equal to 'B'

* Set a specific column as index
    * df.set_index("Name", inplace = True)
    * result = df.loc["Stuti"]
    * result = df.loc[["Stuti", "Seema"]]
        * select multiple rows
    * result = df.loc[["Stuti", "Seema"], ["City", "Salary"]]
        * select multuple rows as some particular columns
    * result = df.loc[:, ["City", "Salary"]]
        * select all rows with some particular columns

# Misc
if __name__ == "__main__":
    main()

type(obj)
    * check class type of an obj
