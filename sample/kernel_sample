# Misc {
    * function name start with __ means the function is a kernel function, need to be called with cautions
        * eg. int __register_chrdev()
# }

# .config {
    $ grep 'CONFIG_HZ=' /boot/config-$(uname -r)
        * check HZ value

    $ make kernelversion
        * in linux root, use this command to check kernel version
# }

# printk {
    * to print without new line, use KERN_CONT
    printk(KERN_CONT "this is");
    printk(KERN_CONT "an apple.\n");

    #define pr_info(fmt, arg ...) \
        printk(KERN_INFO fmt, ##arg)
    pr_err()
# }

# task_struct {
    * see arch/x86/include/asm/current.h
    * https://stackoverflow.com/questions/12434651/what-is-the-current-in-linux-kernel-source
    * in kernel, we can use current->pid to get thread id, and current->comm to get process name
# }

# delayed_work {
    #include <linux/workqueue.h>
    struct delayed_work {
        struct work_struct work;
        struct timer_list timer;

        /* target workqueue and CPU ->timer uses to queue ->work */
        struct workqueue_struct *wq;
        int cpu;
    };

    # Macro
    INIT_DELAYED_WORK(_work, _func);

    # push a work into queue
    int schedule_delayed_work(struct delayed_work *work, unsignwd long delay);
    # schedule_delayed_work(&work, msecs_to_jiffies(interval_msec));

    schedule_work(struct delayed_work *work);

    # delete a work in queue
    int cancel_delayed_work(struct delayed_work *work);
    int cancel_delayed_work_sync(struct delayed_work *work);

    # flush works in queue, blocking until queue is empty
    void flush_schedule_work(void);
# }

# mutex {
    mutex_is_locked(struct mutex *lock)
# }

# time {
    # do_gettimeofday is deprecated, use this instead to get current time in kernel
    void ktime_get_ts64(struct timespec64 *ts);
    struct timespec64 {
        time64_t    tv_sec;         /* seconds */
        long        tv_nsec;        /* nanoseconds */
    };

    # get current time in ns in kernel
    u64 ktime_get_ns(void);

    # jiffies
    ## from include/linux/jiffies.h
    /*
     * Convert various time units to each other:
     */
    extern unsigned int jiffies_to_msecs(const unsigned long j);
    extern unsigned int jiffies_to_usecs(const unsigned long j);
    extern unsigned long msecs_to_jiffies(const unsigned int m);
    extern unsigned long usecs_to_jiffies(const unsigned int u);
    extern unsigned long timespec_to_jiffies(const struct timespec *value);
    extern void jiffies_to_timespec(const unsigned long jiffies,
                                struct timespec *value);
    extern unsigned long timeval_to_jiffies(const struct timeval *value);
    extern void jiffies_to_timeval(const unsigned long jiffies,
                               struct timeval *value);
    extern clock_t jiffies_to_clock_t(unsigned long x);
    extern unsigned long clock_t_to_jiffies(unsigned long x);
    extern u64 jiffies_64_to_clock_t(u64 x);
    extern u64 nsec_to_clock_t(u64 x);
    extern u64 nsecs_to_jiffies64(u64 n);
    extern unsigned long nsecs_to_jiffies(u64 n);

    jiffies / HZ;           # jiffies to seconds
    jiffies * 1000 / HZ     # jiffies to milliseconds
# }

# copy_from_user / copy_to_user {
    #include <linux/fs.h>
    #include <linux/uaccess.h>  /* for copy_from/to_user */


    /*
     * Due to userspace and kernel space separation, we need these 2 functions to copy data. 
     * In general they are identical to memcpy.
     * A classic example for using copy_from_user is when you implement the write function of a character device.
     * Assume you have a module that registers a character device which receives paths of file from the user. Its code will look something like:
     */

    #define BUF_SIZE 1024
    static my_buf[BUF_SIZE];    /* buffer to store data in kernel */
    static ssize_t my_buf_size  /* size of data in buffer */

    static ssize_t device_write(struct file *fs, const char __user *buf, size_t count, loff_t *pos)
    {
        /* Check if we are writing beyond the buf size */
        if (*pos >= BUF_SIZE)
            return -ENOSPC;     /* No space left */

        /* Limit the number of bytes to write */
        if (*pos + count > BUF_SIZE)
            count = BUF_SIZE - *pos;

        if (copy_from_user(my_buf + *pos, buf, count);
            return -EFAULT;

        /* Update the size of the data in the buf */
        if (*pos + count > my_buf_size)
            my_buf_size = *pos + count;

        /* Update the write postion */
        *pos += count;

        return count;
    }

    /*
     * Ioctl is a system call, system call is started by a userspace thread.
     * Inside the ioctl, copy_from_user/copy_to_user is used to copy data.
     /

    static ssize_t device_read(struct file *fs, char __user *buf, size_t count, loff_t *pos)
    {
        ssize_t bytes_read = 0;

        /* check if the position is beyond the end of the data */
        if (*pos >= my_buffer_size)
            return 0;

        /* Limit the number of bytes to read */
        if (*pos + count > my_buf_size)
            count = my_buf_size - *pos;

        if (copy_to_user(buf, my_buf + *pos, count)
            return -EFAULT;

        /* Update the read position */
        *pos += count;
        bytes_read = count;
    }
# }

# completion {
    # a synchronization mechanism in kernel
    struct completion {
        unsigned int        done;
        wait_queue_head_t   wait;
    };

    # APIs:
    #define COMPLETION_INITIALIZER(work) { 0, __WAIT_QUEUE_HEAD_INITIALIZER((work).wait) }
    #define DECLARE_COMPLETION(work) struct completion work = COMPLETION_INITIALIZER(work)
    static inline void init_completion(struct completion *x)
    {
        x->done = 0;                            # done means how many threads are waked up
        init_waitqueue_head(&x->wait);
    }
    static inline void reinit_completion(struct completion *x)
    {
        x->done = 0;
    }
    bool completion_done(struct completion *x); # return 0 if there are waiters, 1 if no waiters


    ## wait APIs:
    void wait_for_completion(struct completion *x);
    int wait_for_completion_interruptible(struct completion *x);
    unsigned long wait_for_completion_timeout(struct completion *x, unsigned long timeout);
    unsigned long wait_for_completion_interruptible_timeout(struct completion *x, unsigned long timeout);

    ## wakeup APIs:
    void complete(struct completion *x);        # wakt up one waiting thread, done++
    void complete_all(struct completion *x);    # wake up all waiting threads

    ## done
    # wait will check done, if 0 it will looping, if not 0, it will --done and return
    # complete will ++done
    # complete_all will set done to UINT_MAX, completing all waiting thread at one time

    ## example:
    {
        #include <linux/module.h>
        #include <linux/init.h>
         
        #include <linux/sched.h>
        #include <linux/kernel.h>
        #include <linux/fs.h>
        #include <linux/types.h>
        #include <linux/completion.h>
         
        MODULE_LICENSE("GPL");
         
        static int complete_major = 250;
        DECLARE_COMPLETION(g_comp);
         
        ssize_t complete_read(struct file *filp, char __user *buf, size_t count, loff_t *pos)  {
            printk(KERN_ERR "process %i (%s) going to sleep\n", current->pid,current->comm);
            wait_for_completion(&g_comp);
            printk(KERN_ERR "awoken %i (%s)\n", current->pid, current->comm);
            return 0;
        }
         
        ssize_t complete_write(struct file *filp, const char __user *buf,size_t count, loff_t *pos) {
            printk(KERN_ERR "process %i (%s) awakening the readers...\n", current->pid, current->comm);
            complete(&g_comp);
            return count;
        }
         
        struct file_operations complete_fops = {
            .owner = THIS_MODULE,
            .read  = complete_read,
            .write = complete_write,
        };
         
        int complete_init(void) {
            int result;
            result = register_chrdev(complete_major, "complete", &complete_fops);
            if(result < 0)
                return result;
            if(complete_major == 0)
                complete_major = result;
            return 0;
        }

        void complete_cleanup(void) {
            unregister_chrdev(complete_major, "complete");
        }

        module_init(complete_init);
        module_exit(complete_cleanup);
    }

    ## testing steps:
    1. mknod /dev/complete 創建 complete節點，在linux上驅動程序需要手動創建文件節點。
    2. insmod complete.ko 插入驅動模塊，這裏要注意的是，因爲我們的代碼中是手動分配的設備號，很可能被系統已經使用了，所以如果出現這種情況，查看/proc/devices文件。找一個沒有被使用的設備號。
    3. cat /dev/complete 用於讀該設備，調用設備的讀函數
    4. 打開另一個終端輸入 echo “hello” > /dev/complete 該命令用於寫入該設備。
# }
