# size of data type
void        1 byte
char        1 byte
short       2 bytes
int         4 bytes
float       4 bytes
double      8 bytes
long        8 bytes
pointer     8 bytes
NULL        8 bytes
long double 16 bytes

# C11 recommends to use int8_t, int16_t, int32_t, int64_t
# uint8_t, uint16_t, uint32_t, uint64_t to avoid dependence problem.


# use 
char const *arr[] = {"abc", "def", "ghi"};
# rather than
char *arr[] = {"abc", "def", "ghi"};

# date
## format print
include <time.h>
time_t rawtime;   
time(&rawtime);
struct tm *timeinfo = localtime ( &rawtime );

char buf[80];
strftime (buffer,80,"Now it's %I:%M%p.",timeinfo);
puts(buffer);

## gettimeofday
include <time.h>
struct timeval   tv;
struct timezone  tz;
gettimeofday(&tv,&tz);	/* &tz could be NULL */

printf("tv_sec:%d\n",tv.tv_sec);
printf("tv_usec:%d\n",tv.tv_usec);
printf("tz_minuteswest:%d\n",tz.tz_minuteswest);
printf("tz_dsttime:%d\n",tz.tz_dsttime);

# clock time
include <time.h>
clock_t start_t, end_t;
double total_t;
start_t = clock();
do_thing();
end_t = clock();
total_t = (double)(end_t - start_t) / CLOCKS_PER_SEC;
printf("Total time taken by CPU: %f sec", total_t);

# random number
include <stdlib.h>
include <time.h>
srand(time(NULL));
/* if don't use srand(time(NULL)), the result of rand() will be the same */
int a = (rand() % 100)+1;

# process
## process exit
exit(int status)
    * all functions registered in atexit() and on_exit() are called
    * return status to caller (command line) 

_exit(int status)
    * exit the process immediately
    * close all file descriptors
    * any children are inherited by process 1
    * the process's parent is sent a SIGCHLD signal


# pthread
pthread_join()
    * The pthread_join() subroutine blocks the calling thread until the specified threadid thread terminates.
    * join, mutex and condition variable are 3 synchronization ways of pthread
    * If a thread is created as detached.

## pthread exit
pthread_exit()
    * in main(), if main() finishes before threads it spawned exit, all its child threads are terminated, but if call pthread_exit() before finishing main(), it will block and support the threads before they are done.
