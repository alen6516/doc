# src: http://ashkenazy.blogspot.tw/2013/06/shell-scripting.html


# 建議開頭
#!/bin/bash


PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
export LANG="en_US.UTF-8"


# 註解
#user comment


# 特殊變數
$PS1        提示字元, which is defined in ~/.bashrc
${$}        shell 本身的 pid
$?          上個 cmd 的回傳值
$!          上個背景執行行程的 pid
$0          當前執行的函式或 process 名稱
"$*"        傳入的所有參數組成的 list => "$1 $2 $3 ..."
"$@"        與 $* 同 不過個參數是獨立的
$#          傳入的參數個數
$_          之前執行指令的最後一個參數
$$          scipt 本身的 pid 常用來當作 unique 的臨時檔名
$RANDOM     get a random integer


# 特殊符號
-
    * only use with pipe in command line
    * means stdout or stdin in the way of file
    * ex: $ tar -cvf - /home | tar -xvf - -C /tmp/homeback
        * first - means stdout (tar /home and pass to stdout)
        * | means pass the content of sdtout to th next command as the stdin
        * second - mean stdin (which is the conten of the stdout from the first command)
        * in this case, we don't worried about what filename to use



# wildcard
*
    means 0 to unlimit number of any char

?
    means at least 1 char

[abcd]
    means at least 1 char which is in the []

[a-z]
    means at least 1 char whose ascii code is from the  ascii code of "a" to ascii code of "z"

[^abc]
    means at least 1 char except the chars in the []

# Variable modify
## Delete
${PATH#/*local/bin:}
    * # means delete rightward from the start of VAR to the 1st matched pattern
    * "/*local/bin:" is the pattern, * is wildcard

${PATH##/*:}
    * delete rightward from the start of VAR to the longest matched pattern
    * ## means longest matched pattern

${PATH%:*bin}
    * % means delete leftward from the end of VAR to the 1st matched pattern
    * ${FILE%.txt}
        * remove the suffix ".txt" from $FILE
   
${PATH%%:*bin}
    * %% means delete leftward from the end of VAR to the longest matched pattern

## Replace
${PATH/sbin/SBIN}
    * replace the 1st matched "sbin" with "SBIN"

${PATH//sbin/SBIN}
    * replace all matched "sbin" with "SBIN"

## Assign
$ USER=${USER-root}
    * if variable USER is unset, set it as "root"
    * if USER is set but is "", then this check is not useful

$ USER=${USER:-root}
    * if variable USER 


# 定義變數與列印變數
VAR="hello world"
echo $VAR


printf "\33[1;31m"
printf "Color Version: $VAR"
printf "\33[0m\n"

# Declare array
declare -A FILE=(                           \
    [".vim"]=".vim"                         \
    [".vimrc"]=".vimrc"                     \
    [".vim_plug"]=".vim_plug"               \
    [".bashrc"]=".bashrc"                   \
    [".bash_aliases"]=".bash_aliases"       \
    [".tmux.conf"]=".tmux.conf"             \
    [".ctags"]=".ctags"                     \
    [".cscope_maps.vim"]=".cscope_maps.vim" \
)

## set value
FILE['key']='value'

## expand the values
"${FILE[@]}"

## expand the keys
"${!FILE[@]}"

## example
for sound in "${!animals[@]}";
do
    echo "$sound - ${animals[$sound]}"; 
done

# $() 與 ${} 區別
$(cmd) 相當於 `cmd`
${VAR} 是為了讓 bash 明白 VAR 是個變數


# arithmetic evaluation
let "sum=a+b"
let "sum=a+10"
sum=$((a+b))
sum=$((a+10))
echo $(( 87 % 2 ))


# random number
* 取得 0~9 間的隨機數
$ declare -i number=$RANDOM*10/32768; echo $number
    * $RANDOM 是介於 0~32767


# 正常結束
exit 0


# data redirection
file descriptor 0 means input from keyboard
file descriptor 1 means std out
file descriptor 2 means err out

## ls 1>a.txt 2>&1
在對 stdout 做導向時，系統所做的事大約會是這樣:
close(1);
fd=open("a.txt", O_WRONLY, 0);

系統必需先把原本已經打開的 fd=1 關閉，然後再將要導入的檔案開啟，新開啟的檔案就會被指定為 fd=1。
這時候再遇到後面 stderr 的導向時，系統會這麼做:
close(2);
fd=dup(1);

一樣是先把 fd=2 關閉，但是這時候要導向的是另一個 fd，所以基本上系統做的事情只是把 stdout 的 fd 複製一份給 stderr。
由於 fd 是指向相同的地方，所以這時任何寫入 stderr 的資料當然也會進入已經開啟的 dirlist 裡。

## ls 2>&1 >a.txt
倒過來的話我們會先把 stderr 指向 stdout，但是當 stdout 被導向 a.txt 時會捨棄舊的 fd=1，開啟 a.txt 為新的 fd。
這時 stderr 指向的卻還是舊的 stdout 的 fd，因此並不會寫入 a.txt。

## target information is in err out
    $ cmd 2>&1 1>/dev/null | grep PATTERN
        * 

## direct stdin and stdout to different file
    $ cmd > here.txt 2> there.txt


## direct stdin and stdout to the same file
    $ cmd > file.txt 2>&1
        * 或者 $ cmd &> file.txt
        * 不能寫 $ cmd > file.txt 2> file.txt
            * 這樣資料會亂掉


## here file
    $ cat < file.txt



## here string
    * `$ cat <<< "hi there"`
        * 將 <<< 右邊的東西作為左邊的輸入 stdin


## here document
    ```
    $ cat << EOF
    > hi
    > there
    > EOF
    hi
    there
    ```
    * 允許輸入多行內容直到輸入指定結束字尾為止
    * 輸入多行內容並存到檔案裡
        * `$ cat << EOF >> doc`


## here file(?
    * `$ cat < $FILE`
        * 將右邊的檔案內容作為左邊輸入的 stdin


## redirection and here string
    ```
    $ cat > dst_file.txt << eof
    > this is
    > the content
    > of file
    > eof
    ```


# command execute flow
$ condition || cmd1 && cmd2
    * if condition is true, then cmd1 will not be executed, and this $? will pass to cmd2, so cmd2 will be executed
    * if condition is false, then cmd1 will be executed, and if cmd1 return true, then cmd2 will not be executed


$ condition && cmd1 || cmd2
    * if condition is false, cmd1 will not be executed, and this $? will pass to cmd2, so cms2 will be executed


$ [ -d /tmp/dir ] || mkdir /tmp/dir && touch /tmp/dir/test
    * think it


# Pipe
* only pass stdout to cmd after pipe
* $ command1 | command2
    * 將 command1 的結果作為 command2 的 stdin 輸入
    * command2 是在 subshell 執行，所以 `$ echo "hello" | read var` 本來會將 hello 紀錄在 $var 裡，但指令結束時退出 subshell，在當前 shell 的 $var 仍是空的
        * 若要解決，改用 `$ read var <<< "hello"`
* If |& is used, command's standard error, in addition to its standard output, is connected to command2's standard input through the pipe
    * So it is just like pipe operator |, but piping both stdout and stderr.
    * echo "aaa" |& cat


# if-else判斷式
if [ -n "$INPUT" ] && [ "$INPUT" == "Yes" ]; then
  echo "result is Yes"
elif [ -n "$INPUT" ] && [ "$INPUT" == "No" ]; then
  echo "result is No"
else
  echo "wrong input"
fi

if [ "$1" = "1" ]; then
    ...
done

# 讀取argument
if [ ! -z "$1" ]; then
  ARGS=$1
fi
echo $ARGS


# Press any key to continue (without Enter)
read -n 1 -s -r -p "Press any key to continue"


# 檢查執行者身份
whoami_ret="$(whoami)"
if [ "$whoami_ret" != "root" ]; then
  echo "This script must be run as root"
  exit
fi


# 使用者輸入
read -p "Please input (Y/N), default is N:" ANSWER
if [ "$ANSWER" == "Y" -o "$ANSWER" == "y" ]; then
  echo "result is Yes"
fi


# 執行指令的結果
pyOpenSSL_ret="$(rpm -q python-openssl | grep install | wc -l)"
if [ "$pyOpenSSL_ret" == "1" ]; then
  echo "python-openssl is not installed, please install python-openssl"
  exit
fi  


# 類似 traverse 陣列
SERVER_LIST=(192.168.0.1 192.168.0.2 192.168.0.3)
for IP in ${SERVER_LIST[@]}
do
  echo "IP address: $IP"
done


# array
IP=(10.10.10.10 20.20.20.20)
length=${#IP[@]}
for ((i=0; i<length; i++))
do
    echo ${IP[$i]}
done


# Switch case
case $CAR in
  AUDI | audi)
    echo "audi"
  ;;
  VOLVO | volvo)
    echo "volvo"
  ;;
  BENZ | benz)
    echo "benz"
  ;;
  *) 
    echo "wrong role type"
    exit
  ;;
esac


# while Loop
until [ "$ANSWER" == "yes" ]
do
  read -p "Please input \"yes\":" ANSWER
done


# while loop
i=0
while [ "$i" != "10" ]
do
  i=$(($i+1))
  echo $i
done


# while true
while :

# while loop in one line
while sleep 2; do echo thinking; done

# for loop
for CAR in AUDI VOLVO BENZ
do
 echo ${CAR}
done


# for loop
for i in $(seq 1 10)
do
  echo ${i}
done


# for loop
for ((i=1; i<=10; i=i+1))
do
  echo $i
done


# for 迭代
for i in $(ls)
do
  echo $i
done


# 等候某個事件發生
FILE_EXISTED=0;
while [ $FILE_EXISTED -ne "1" ]; 
do
  if [ -z "/root/test_file" ];then
    FILE_EXISTED=1
  fi
  sleep 1;
done


# Function
function PRINT_FUNCTION(){
  echo "args is $1"
}
PRINT_FUNCTION "first_args"

foo() {
    echo ${FUNCNAME[0]}     # print function name
}


# 檔案比較
-f file	          file 存在，並且為一檔案。
-d file	          file 存在，並且為一目錄。
-r file	          執行此 script 者對 file 具有讀取權限。
-w file	          執行此 script 者對 file 具有寫入權限。
-x file	          執行此 script 者對 file 具有執行權限。
-e file	          file 存在於系統上。
-s file	          file 存在，並且檔案大小不為 0。
-u file	          file 具有 SUID 的屬性。
-g file	          file 具有 SGID 的屬性。
-k file	          file 具有 Sticky bit 的屬性。
file1 -nt file2	  file1 較 file2 為新 ( 根據修改時間作比較 )。
file1 -ot file2	  file1 較 file2 為舊 ( 根據修改時間作比較 )。


# 數值比較
n1 -eq n2	        n1 等於 n2。
n1 -ne n2	        n1 不等於 n2。
n1 -gt n2	        n1 大於 n2。
n1 -ge n2	        n1 大於等於 n2。
n1 -lt n2	        n1 小於 n2。
n1 -le n2	        n1 小於等於 n2。


# 字串比較
"$str1" == "$str2"	    str1 等於 str2 (=兩邊要空格)。
"$str1" != "$str2"      str1 不等於 str2。
-z "$str"               str 為空字串。
-n "$str"	            str 為非空字串。


# 將字串前面的0去掉
echo "00005 00010 00601 00550" | awk '$0*=1'
