# src: http://ashkenazy.blogspot.tw/2013/06/shell-scripting.html


# 建議開頭
#!/bin/bash


PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
export LANG="en_US.UTF-8"


# 註解
#user comment

## add line comment to multi-line command
https://stackoverflow.com/questions/9522631/how-to-put-a-line-comment-for-a-multi-line-command
$ echo argument1 `#comment for arg1`  \
       argument2 `#comment for arg2`  \
       argument3 `#comment for arg3`

# 特殊變數
$PS1        提示字元, which is defined in ~/.bashrc
${$}        shell 本身的 pid
$?          上個 cmd 的回傳值
$!          上個背景執行行程的 pid
!!         execute the last command
$_          之前執行指令的最後一個參數
!$          之前執行指令的最後一個參數
$0          當前執行的函式或 process 名稱
"$*"        傳入的所有參數組成的 list => "$1 $2 $3 ..."
"$@"        與 $* 同 不過個參數是獨立的
$#          傳入的參數個數
$$          scipt 本身的 pid 常用來當作 unique 的臨時檔名
$RANDOM     get a random integer
$(nproc)    number of processing units


# 特殊符號
-
    * only use with pipe in command line
    * means stdout or stdin in the way of file
    * ex: $ tar -cvf - /home | tar -xvf - -C /tmp/homeback
        * first - means stdout (tar /home and pass to stdout)
        * | means pass the content of sdtout to th next command as the stdin
        * second - mean stdin (which is the conten of the stdout from the first command)
        * in this case, we don't worried about what filename to use


# wildcard (in bash)
*
    means 0 to unlimit number of any char

?
    means at least 1 char
    $ ls /etc/?????
        * find the file under /etc/ with 5 chars as filename

[abcd]
    means at least 1 char which is in the []

[a-z]
    means at least 1 char whose ascii code is from the  ascii code of "a" to ascii code of "z"
    $ ls /etc/*[0-9]*
        * find the file under /etc/ with the filename contains number

[^abc]
    means at least 1 char except the chars in the []
    $ ls /etc/[^a-z]*
        * find the file under /etc/ with the filename starting with Upper-case chars

# Variable modify
## ref: https://linux.vbird.org/linux_basic/centos7/0320bash.php#variable_other
## Delete
${VAR#Pattern}
    * # means delete VAR rightward until delete the 1st matched pattern
    * ex: ${PATH#/*local/bin}
        * "/*local/bin:" is the pattern, * is wildcard
        * before $PATH: /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
        * after  $PATH: /usr/bin:/usr/local/sbin:/usr/sbin
    * ex: ${PATH#/*:}
        * "/*:" is the pattern
        * before $PATH: /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
        * after  $PATH: /usr/bin:/usr/local/sbin:/usr/sbin

${VAR##Pattern}
    * ## means delete VAR rightward until delete the longest matched pattern
    * ex: ${PATH##/*:}
        * "/*:" is the pattern
        * before $PATH: /usr/bin:/usr/local/sbin:/usr/sbin
        * after  $PATH: /usr/sbin

${VAR%Pattern}
    * % means delete VAR leftward to the 1st matched pattern
    * ex: ${FILE%.txt}
        * remove the suffix ".txt" from $FILE
    * ex: $PWD="/home/alan/linux/driver/gpu", how to get path at linux/ ?
        * ${PWD%linux*}"linux/"
   
${VAR%%Pattern}
    * %% means delete VAR leftward to the longest matched pattern
    * ex: ${PATH%%:*bin}
        * ":*bin" is the pattern
        * before $PATH: /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
        * after  $PATH: /usr/local/bin

## Replace
${PATH/sbin/SBIN}
    * replace the 1st matched "sbin" with "SBIN"

${PATH//sbin/SBIN}
    * replace all matched "sbin" with "SBIN"

${PATH//$WORD/}
    * remove all $WORD from $PATH

## Assign
* USER=${USER-root}
    * if variable USER is unset, set it as "root"
    * if USER is set but is "", then this check is not useful

* USER=${USER:-root}
    * if variable USER is unset or "", set it as "root"
    * str: means when str is unset or ""

* VAR=${str?"no such str"}
    * -bash: str: no such str
    * if str is unset, bash output "no such str", else set VAR=$str

* VAR=${str:?"no such str or str is \"\""}
    * -bash: str: no such str or str is ""
    * if str is unset or "", bash output error, else set VAR=$str

## Remove first N charactors
str="--1920x1080"
str=${str:2}    # 1920x1080

# or using cut
str=`cut -c3- <<< $str`   # 1920x1080

## !
$ !ssh
    * search in history and execute the most recent command start with "ssh"

$ !!
    * execute the last command

# 定義變數與列印變數
VAR="hello world"
echo $VAR


printf "\33[1;31m"
printf "Color Version: $VAR"
printf "\33[0m\n"

# Declare array
declare -A FILE=(                           \
    [".vim"]=".vim"                         \
    [".vimrc"]=".vimrc"                     \
    [".vim_plug"]=".vim_plug"               \
    [".bashrc"]=".bashrc"                   \
    [".bash_aliases"]=".bash_aliases"       \
    [".tmux.conf"]=".tmux.conf"             \
    [".ctags"]=".ctags"                     \
    [".cscope_maps.vim"]=".cscope_maps.vim" \
)

echo "keys are: " ${!FILE[@]}
echo "values are: " ${FILE[@]}

for key in ${!FILE[@]}
do
    echo $key ${FILE[$key]}
done

## set value
FILE['key']='value'

## expand the values
"${FILE[@]}"

## expand the keys
"${!FILE[@]}"

# Declare indexed array
declare -A FILE=(".vimrc" ".bashrc" ".tmux.conf")
echo ${FILE[0]}
echo ${FILE[@]}     # all items
echo ${FILE[@]:2:3} # extracting the 3rd element
echo ${FILE[1]:2:4} # extracting parts of an element ("ash")
echo ${FILE[@]/.vimrc/.ssh} # find and replace array items
unset FILE[2]       # removeing an element from the array

echo ${#FILE[@]}    # get size of the array
echo ${#FILE[1]}    # get the size of an element in the array

FILE=(${FILE[@]} ".ctags" ".bash_aliases")  # adding new items to the array
FILE2=(${FILE[@]})  # copy the array


# $() 與 ${} 區別
$(cmd) 相當於 `cmd`
${VAR} 是為了讓 bash 明白 VAR 是個變數


# arithmetic evaluation
let "sum=a+b"
let "sum=a+10"
sum=$((a+b))
sum=$((a+10))
echo $(( 87 % 2 ))


# random number
* 取得 0~9 間的隨機數
$ declare -i number=$RANDOM*10/32768; echo $number
    * $RANDOM 是介於 0~32767


# random string
$ echo $RANDOM | md5sum | base64
    * will give you a 49-char string


# 正常結束
exit 0


# data redirection
file descriptor 0 means input from keyboard
file descriptor 1 means std out
file descriptor 2 means err out

## ls 1>a.txt 2>&1
在對 stdout 做導向時，系統所做的事大約會是這樣:
close(1);
fd=open("a.txt", O_WRONLY, 0);

系統必需先把原本已經打開的 fd=1 關閉，然後再將要導入的檔案開啟，新開啟的檔案就會被指定為 fd=1。
這時候再遇到後面 stderr 的導向時，系統會這麼做:
close(2);
fd=dup(1);

一樣是先把 fd=2 關閉，但是這時候要導向的是另一個 fd，所以基本上系統做的事情只是把 stdout 的 fd 複製一份給 stderr。
由於 fd 是指向相同的地方，所以這時任何寫入 stderr 的資料當然也會進入已經開啟的 dirlist 裡。

## ls 2>&1 >a.txt
倒過來的話我們會先把 stderr 指向 stdout，但是當 stdout 被導向 a.txt 時會捨棄舊的 fd=1，開啟 a.txt 為新的 fd。
這時 stderr 指向的卻還是舊的 stdout 的 fd，因此並不會寫入 a.txt。

## target information is in err out
    $ cmd 2>&1 1>/dev/null | grep PATTERN
        * 

## direct stdin and stdout to different file
    $ cmd > here.txt 2> there.txt


## direct stdin and stdout to the same file
    $ cmd > file.txt 2>&1
        * 或者 $ cmd &> file.txt
        * 不能寫 $ cmd > file.txt 2> file.txt
            * 這樣資料會亂掉


## here string
    * `$ cat <<< "hi there"`
        * 將 <<< 右邊的東西作為左邊的輸入 stdin


## here document
    ```
    $ cat << EOF
    > hi
    > there
    > EOF
    hi
    there
    ```
    * 允許輸入多行內容直到輸入指定結束字尾為止
    * 輸入多行內容並存到檔案裡
        * `$ cat << EOF >> doc`


## here file
    * `$ cat < $FILE`
        * 將右邊的檔案內容作為左邊輸入的 stdin

## clear a file
    * `$ > file`

## redirection and here string
    ```
    $ cat > dst_file.txt << eof
    > this is
    > the content
    > of file
    > eof
    ```


# command execute flow
$ condition || cmd1 && cmd2
    * if condition is true, then cmd1 will not be executed, and this $? will pass to cmd2, so cmd2 will be executed
    * if condition is false, then cmd1 will be executed, and if cmd1 return true, then cmd2 will not be executed


$ condition && cmd1 || cmd2
    * if condition is false, cmd1 will not be executed, and this $? will pass to cmd2, so cms2 will be executed


$ [ -d /tmp/dir ] || mkdir /tmp/dir && touch /tmp/dir/test
    * think it


# Pipe
* only pass stdout to cmd after pipe
* $ command1 | command2
    * 將 command1 的結果作為 command2 的 stdin 輸入
    * command2 是在 subshell 執行，所以 `$ echo "hello" | read var` 本來會將 hello 紀錄在 $var 裡，但指令結束時退出 subshell，在當前 shell 的 $var 仍是空的
        * 若要解決，改用 `$ read var <<< "hello"`
* If |& is used, command's standard error, in addition to its standard output, is connected to command2's standard input through the pipe
    * So it is just like pipe operator |, but piping both stdout and stderr.
    * echo "aaa" |& cat


# if-else判斷式
if [ -n "$INPUT" ] && [ "$INPUT" == "Yes" ]; then
    echo "result is Yes"
elif [ -n "$INPUT" ] && [ "$INPUT" == "No" ]; then
    echo "result is No"
else
    echo "wrong input"
fi

if [ "$1" = "1" ]; then
    ...
done

if [[ "$1" = "1" || "$1" = "2" ]]; then
    ...
done

if [[ foo && bar ]]; then
    ...
done

## check if a variable is number
if [ -n "$var" ] && [ "$var" -eq "$var" ] 2>/dev/null; then

if [[ $VAR =~ ^[0-9]+$ ]]; then

## check if a variable contains number
if [[ $VAR =~ [0-9] ]]; then

# check if variable contains only alphabets and numbers
if [[ $VAR =~ ^[0-9a-zA-Z]+$ ]]; then

# Check if string starts with character
if [[ $VAR =~ ^[aA] ]]; then

## check if a variable is set
if [ -z "$var" ]; then
    # remember, $var needs to be wrapped by ""
    echo "is not set"
else
    echo "is set"
fi

## check command execution result
if lsmod | grep drm &> /dev/null; then
    echo "drm is loaded!"
fi

# =, ==, -eq in if condition
* = and == are for string comparison
* = and == are equivalent in bash, but only = is legal in sh, so = is recommended
* -eq is for numeric comparison
* [] is an alias of test command, not a syntax
    * [ is a command, and that's why we need a space between [ and the next word
    * ] is an mandatory argument of [ command, that's why we need space between it and its previous word
* [[]] is a bash, zsh syntax, more powerful than []
* (()) is used to test an arithmetic expression
* () is used to execute command in subshell
    * (a=1)
    * then echo $a will get nothing

# 判斷式
| 1. 關於某個檔名的『檔案類型』判斷，如 test -e filename 表示存在否
| ----------------------- | ---------------------------------------------------------------------------- 
| -e                      | 該『檔名』是否存在？(常用)
| -f                      | 該『檔名』是否存在且為檔案(file)？(常用)
| -d                      | 該『檔名』是否存在且為目錄(directory)？(常用)
| -b                      | 該『檔名』是否存在且為一個 block device 裝置？
| -c                      | 該『檔名』是否存在且為一個 character device 裝置？
| -S                      | 該『檔名』是否存在且為一個 Socket 檔案？
| -p                      | 該『檔名』是否存在且為一個 FIFO (pipe) 檔案？
| -L                      | 該『檔名』是否存在且為一個連結檔？

| 2. 關於檔案的權限偵讀否 (但 root 權限常有例外)
| -r                      | 偵測該檔名是否存在且具有『可讀』的權限？
| -w                      | 偵測該檔名是否存在且具有『可寫』的權限？
| -x                      | 偵測該檔名是否存在且具有『可執行』的權限？
| -u                      | 偵測該檔名是否存在且具有『SUID』的屬性？
| -g                      | 偵測該檔名是否存在且具有『SGID』的屬性？
| -k                      | 偵測該檔名是否存在且具有『Sticky bit』的屬性？
| -s                      | 偵測該檔名是否存在且為『非空白檔案』？

| 3. 兩個檔案之間的比
| -nt                     | (newer than)判斷 file1 是否比 file2 新
| -ot                     | (older than)判斷 file1 是否比 file2 舊
| -ef                     | 判斷 file1 與 file2 是否為同一檔案，可用在判斷 hard link 的判定上。 主要意義在判定，兩個檔案是否均指向同一個 inode 哩！

| 4. 關於兩個整數之間
| -eq                     | 兩數值相等 (equal)
| -ne                     | 兩數值不等 (not equal)
| -gt                     | n1 大於 n2 (greater than)
| -lt                     | n1 小於 n2 (less than)
| -ge                     | n1 大於等於 n2 (greater than or equal)
| -le                     | n1 小於等於 n2 (less than or equal)

| 5. 判定字串的資料
| test -z string          | 判定字串是否為 0 ？若 string 為空字串，則為 true
| test -n string          | 判定字串是否非為 0 ？若 string 為空字串，則為 false。<br>註： -n 亦可省略
| test str1 == str2       | 判定 str1 是否等於 str2 ，若相等，則回傳 true
| test str1 != str2       | 判定 str1 是否不等於 str2 ，若相等，則回傳 false


| 6. 多重條件判定，例lename
| -a                      | (and)兩狀況同時成立！例如 test -r file -a -x file，則 file 同時具有 r 與 x 權限時，才回傳 true。
| -o                      | (or)兩狀況任何一個成立！例如 test -r file -o -x file，則 file 具有 r 或 x 權限時，就可回傳 true。
| !                       | 反相狀態，如 test ! -x file ，當 file 不具有 x 時，回傳 true


# 檔案比較
-f file	          file 存在，並且為一檔案。
-d file	          file 存在，並且為一目錄。
-r file	          執行此 script 者對 file 具有讀取權限。
-w file	          執行此 script 者對 file 具有寫入權限。
-x file	          執行此 script 者對 file 具有執行權限。
-e file	          file 存在於系統上。
-s file	          file 存在，並且檔案大小不為 0。
-u file	          file 具有 SUID 的屬性。
-g file	          file 具有 SGID 的屬性。
-k file	          file 具有 Sticky bit 的屬性。
file1 -nt file2	  file1 較 file2 為新 ( 根據修改時間作比較 )。
file1 -ot file2	  file1 較 file2 為舊 ( 根據修改時間作比較 )。


# 數值比較
n1 -eq n2	        n1 等於 n2。
n1 -ne n2	        n1 不等於 n2。
n1 -gt n2	        n1 大於 n2。
n1 -ge n2	        n1 大於等於 n2。
n1 -lt n2	        n1 小於 n2。
n1 -le n2	        n1 小於等於 n2。


# 字串比較
[[ "$str1" == "$str2" ]]        str1 等於 str2 (=兩邊要空格,變數要"")。
[[ "$str1" != "$str2" ]]        str1 不等於 str2。
[[ "$str1" == "root"* ]]        str1 is started with root
[[ "$str" == *"$substr"* ]]     if str contains substr
-z "$str"                       str 為空字串。
-n "$str"	                    str 為非空字串。


# Switch case
case $CAR in
  AUDI | audi)
    echo "audi"
  ;;
  VOLVO | volvo)
    echo "volvo"
  ;;
  BENZ | benz)
    echo "benz"
  ;;
  *)
    echo "wrong role type"
    exit
  ;;
esac


# while Loop
until [ "$ANSWER" == "yes" ]
do
    read -p "Please input \"yes\":" ANSWER
done


# while loop
i=0
while [ "$i" != "10" ]
do
    i=$(($i+1))
    echo $i
done


# while true
while :

# while loop in one line
while sleep 2; do echo thinking; done

# for loop
for CAR in AUDI VOLVO BENZ
do
    echo ${CAR}
done

# for loop in one line
for file in `ls`; do md5sum $file; done


# for loop
for i in $(seq 1 10)
do
    echo ${i}
done

for i in {1..5}
do
    ...
done


# for loop
for ((i=1; i<=10; i=i+1))
do
    echo $i
done


# for 迭代
for i in $(ls)
do
  echo $i
done


# Function
function PRINT_FUNCTION(){
  echo "args is $1"
}
PRINT_FUNCTION "first_args"

foo() {
    echo ${FUNCNAME[0]}     # print function name
    return                  # we can return from a function, and exit from a bash
}

if [[ -z $1 ]]; then
    shift
    foo $@                  # pass the 2nd and rest arguments to foo
fi

# 等候某個事件發生
FILE_EXISTED=0;
while [ $FILE_EXISTED -ne "1" ];
do
  if [ -z "/root/test_file" ];then
    FILE_EXISTED=1
  fi
  sleep 1;
done

## 將字串前面的0去掉
echo "00005 00010 00601 00550" | awk '$0*=1'

## readline 逐行讀取
```bash
filename="file.txt"

while read -r line
do
    printf "%b\n" $line
done < $filename
# The while loop is executed in a subshell. So any variable in it will not be available once the subshell exits.
# We can use here-string to let the while loop be in the main shell process.
```

## 讀取argument
if [ ! -z "$1" ]; then
    ARGS=$1
f
echo $ARGS


## Press any key to continue (without Enter)
read -n 1 -s -r -p "Press any key to continue"


## 檢查執行者身份
whoami_ret="$(whoami)"
if [ "$whoami_ret" != "root" ]; then
    echo "This script must be run as root"
    exit
fi


## 使用者輸入
read -p "Please input (Y/N), default is N:" ANSWER
if [ "$ANSWER" == "Y" -o "$ANSWER" == "y" ]; then
    echo "result is Yes"
fi


## 執行指令的結果
pyOpenSSL_ret="$(rpm -q python-openssl | grep install | wc -l)"
if [ "$pyOpenSSL_ret" == "1" ]; then
    echo "python-openssl is not installed, please install python-openssl"
    exit
fi


## 類似 traverse 陣列
SERVER_LIST=(192.168.0.1 192.168.0.2 192.168.0.3)
for IP in ${SERVER_LIST[@]}
do
    echo "IP address: $IP"
done

## getopts
usage() { echo "Usage: $0 [-s <45|90>] [-p <string>]" 1>&2; exit 1; }

# a     => option is flag, it takes no parameter
# a:    => option is argument, it takes a parameter as $OPTARG, bash will throw default error if no parameter is passed
# :a:   => option is argument, it takes a parameter as $OPTARG, user needs to handle the error if no parameter is passed
# a:b   => option a is argument, it takes a parameter as $OPTARG, option b is a flag
# a:b:  => option a and b are both arguments, they take parameters as $OPTARG, bash will throw default error for them if no parameter is passed
# :a:b: => option a and b are both arguments, they take parameters as $OPTARG, and user needs to handle error for them if no parameter is passed
while getopts ":a:b:c" option; do
    case "${option}" in
        s)
            s=${OPTARG}
            ((s == 45 || s == 90)) || usage
            ;;
        p)
            p=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z "${s}" ] || [ -z "${p}" ]; then
    usage
fi

echo "s = ${s}"
echo "p = ${p}"

## array
IP=(10.10.10.10 20.20.20.20)
length=${#IP[@]}
content=${IP[@]}
for ((i=0; i<length; i++))
do
    echo ${IP[$i]}
done

# remove an element from array
unset IP[1]

# add element
IP+=(8.8.8.8)

## 取得時間
    date +'%Y %m %d %H %M %S'
    
    # 取得秒數
    date +'%s'


## 將指令存為變數
    x="ls | wc"
    eval $x
    y=$(eval $x)
    echo $y


## 四則運算
    # 一般宣告出來的變數，形態都是字串，無法做運算
    a=6
    b=3
    
    #可以用declare -i 來宣告整數變數
    declare -i c=a-b　　# 宣告變數 c 為整數。
    
    # 或利用bash內建的指令let
    let d=a*b　　　　 　# 使用 let 指令做數值運算。
    
    # 利用指令expr，不過請注意空格
    e=`expr $a / $b`　　# 使用 expr 指令做數值運算。
    
    f=$(expr $a + $b)　 # 與 f=`expr $a + $b` 是一樣的。
    
    #推薦用這個，避免空格的失誤
    g=$(($a+$b))


## printf
    # 以 printf 取代 echo
    
    %s : 印字串，但無法解析 \n
    %d : 10 進位整數
    %o : 8  進位整數
    %f : 浮點數
    %b : 印字串，但可解析 \n
    
    printf "%b\n" abc

## 取得當前行號及函式名稱
- [ref](https://blog.csdn.net/clmotskatrina/article/details/8143770)
    // 當前函式名稱
    $FUNCNAME[0]
    
    // 當前行號
    $LINENO
## 取得該腳本的相對於當前目錄的相對位置
    CURR_PATH=`pwd`
    SCRIPT_PATH=$BASH_SOURCE

## prompt yes/no to user
    while true; do
        read -p "Do you wish to install this program? " yn
        case $yn in
            [Yy]* )
                make install; break
                ;;

            [Nn]* )
                exit
                ;;

            * )
                echo "Please answer yes or no."
                ;;
        esac
    done

    ### or use select command, no need a while loop
    echo "Do you wish to install this program?"
    select yn in "Yes" "No"; do
        case $yn in
            Yes ) make install; break;;
            No  ) exit;;
        esac
    done

## check if a command exists
    command -v cowsay
    ### using `command` is cheapter than using `which`
